class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight
        self.ratio = value / weight  # Value-to-weight ratio
def fractional_knapsack(capacity, items):
    # Sort items by value-to-weight ratio in descending order
    items.sort(key=lambda x: x.ratio, reverse=True)
    total_value = 0  # Total value accumulated
    for item in items:
        if capacity <= 0:  # If the knapsack is full, break
            break
        if item.weight <= capacity:
            # If the item can be fully taken
            total_value += item.value
            capacity -= item.weight
        else:
            # If the item can't be fully taken, take the fraction
            total_value += item.ratio * capacity
            capacity = 0  # Knapsack is now full
    return total_value
# Example usage
if __name__ == "__main__":
    items = [Item(60, 10), Item(100, 20), Item(120, 30)]  # (value, weight)
    capacity = 50  # Maximum capacity of the knapsack
    max_value = fractional_knapsack(capacity, items)
    print("Maximum value in Knapsack =", max_value)
